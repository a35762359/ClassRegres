'''
分类，前13列为x，样本不多因此多次cross求均值
RFE+SVC+for网格寻优+寻优内Cross平均
'''

import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import cross_val_score
discfile = 'G:/6-15s-1.xlsx'
data = pd.read_excel(discfile, header=None)
x=data.drop(columns=13)
y=data.iloc[:, 13]

x_trainval, x_test, y_trainval, y_test = train_test_split(
    x, y, random_state=42)
x_train, x_valid, y_train, y_valid = train_test_split(
    x_trainval, y_trainval, random_state=1)

from sklearn.feature_selection import RFE
from sklearn.ensemble import RandomForestClassifier
select = RFE(RandomForestClassifier(n_estimators=100, random_state=42),
             n_features_to_select=8)
select.fit(x_train, y_train)
mask = select.get_support()
print(mask)
plt.matshow(mask.reshape(1, -1), cmap='gray_r')
plt.xlabel("sample index")
plt.show()

x_trainval_rfe = select.transform(x_trainval)
x_test_rfe = select.transform(x_test)
x_rfe=select.transform(x)

# pca = PCA(n_components=0.85) # PCA替换
# pca.fit(x)
# x_pca = pca.transform(x)
# # pd.DataFrame(low_d).to_excel(outputfile)
# pca.components_  
# ra = pca.explained_variance_ratio_  


bestscore = 0
for gamma in [0.001, 0.01, 0.1, 1, 10, 100]:
    for c in [0.001, 0.01, 0.1, 1, 10, 100]:
        svm = SVC(gamma=gamma, C=c)
        scores = cross_val_score(svm, x_trainval_rfe, y_trainval, cv=5)
        score = np.mean(scores)
        if score > bestscore:
            bestscore = score
            best_parameters = {'C': c, 'gamma': gamma}
svm=SVC(**best_parameters)
svm.fit(x_trainval_rfe, y_trainval)
scores = cross_val_score(svm, x_test_rfe, y_test, cv=5)
print("{}".format(score.mean()))
